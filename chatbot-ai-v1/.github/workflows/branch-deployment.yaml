name: Manual Branch Deployment 
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to deploy'
        required: true


env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: chat_bot
  ECS_SERVICE: chatbot-feature
  ECS_CLUSTER: chatbot-dev
  ECS_TASK_DEFINITION_FAM: chatbot-task-feature 
  CONTAINER_NAME: ChatbotServiceFeature

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
            # - name: Validate branch name
            #   run: |
            #     if [ ${{ github.event.inputs.branch }} == "main" ] || [ ${{ github.event.inputs.branch }} == "dev" ]; then
            #       echo "Manual deployment from ${{ github.event.inputs.branch }} branch is not allowed."
            #       exit 1
            #     fi
              
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.inputs.branch }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Create new builder
              run: |
                  docker buildx create --name mybuilder --use
                      
            - name: Create a version tag
              id: create_tag
              run: |
                # split branch name to remove any backslashes (remove username from linear generated names)
                input_branch="${{ github.event.inputs.branch }}"
                branch_name=$(echo "${input_branch}" | cut -d'/' -f2-)
                
                # Combine build number and date
                TAG_NAME="branch-${branch_name}-build-${{ github.run_number }}"
                echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"

            - name: Set .dockerignore file 
              run: | 
                  cp dockerfiles/.dockerignore.dev .dockerignore

            - name: Set dockerfile
              run: | 
                  cp dockerfiles/Dockerfile.dev Dockerfile

            - name: Build and push 
              uses: docker/build-push-action@v5
              id: build-image
              with:
                context: .
                file: Dockerfile
                push: true
                tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.create_tag.outputs.tag }}
                builder: mybuilder
                cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:dev-cache

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition-family: ${{ env.ECS_TASK_DEFINITION_FAM }}
                container-name: ${{ env.CONTAINER_NAME }}
                image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.create_tag.outputs.tag }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v2
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ env.ECS_SERVICE }}
                cluster: ${{ env.ECS_CLUSTER }} 
