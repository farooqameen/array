"""
API models used for request and response validation in the application.

These Pydantic models define the structure for query inputs,
query results, and file upload confirmations.
"""

from pydantic import BaseModel
from typing import List, Optional


class QueryRequest(BaseModel):
    """
    Model for incoming query requests.

    Attributes:
        query (str): The natural language question or prompt from the user.
    """

    query: str


class QueryResponse(BaseModel):
    """
    Model for query responses returned by the system.

    Attributes:
        response (str): The answer generated by the query engine.
    """

    response: str


class FileUploadResult(BaseModel):
    """
    Model representing the outcome of processing a single file within a multi-file upload.

    Attributes:
        filename (str): The name of the uploaded file.
        status (str): "success" or "failed" indicating the processing result for this file.
        indexed_chunks (Optional[int]): The number of chunks indexed for this specific file, if successful.
        reason (Optional[str]): A message explaining why processing failed for this file, if applicable.
    """

    filename: str
    status: str
    indexed_chunks: Optional[int] = None
    reason: Optional[str] = None


class UploadResponse(BaseModel):
    """
    Schema for the response returned after a PDF upload operation.
    It indicates the overall status of the upload and provides detailed results for each file.

    Attributes:
        status (str): "success", "partially_successful", or "failed" for the entire operation.
        reason (Optional[str]): A general reason for failure, if the entire operation failed.
        results (Optional[List[FileUploadResult]]): A list of results for each file processed.
    """

    status: str
    reason: Optional[str] = None
    results: Optional[List[FileUploadResult]] = None


class SearchResultItem(BaseModel):
    """
    Schema for an individual search result item.
    Includes the chunk ID, relevance score, extracted text, and page number.
    """

    chunk_id: str
    score: float
    text: str
    page_number: int


class SearchResponse(BaseModel):
    """
    Schema for the response returned after a search operation.
    Contains the original query and a list of matching search results.
    """

    status: str
    query: str
    results: List[SearchResultItem]
    reason: Optional[str] = None
