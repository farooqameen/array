"""
API routes for handling document uploads and rulebook queries.

This module defines FastAPI endpoints that connect HTTP requests
to controller logic for uploading files and querying indexed documents.
"""

from fastapi import APIRouter, UploadFile, File, HTTPException
from controllers import chat_controller
from models.api_models import QueryRequest, QueryResponse, UploadResponse
from logger import logger

router = APIRouter()


@router.post("/chat/upload/", response_model=UploadResponse)
async def upload_document(file: UploadFile = File(...)):
    """
    Upload a document to the server.

    Accepts a file and delegates to the controller for saving it.
    Returns confirmation upon success.

    Args:
        file (UploadFile): The document file to be uploaded.

    Returns:
        UploadFileResponse: Upload metadata including filename and message.

    Raises:
        HTTPException: If an error occurs during file handling or saving.
    """
    logger.info(f"Received upload request for file: {file.filename}")
    try:
        response = await chat_controller.upload_document(file)
        logger.info(f"File {file.filename} uploaded successfully.")
        return response
    except HTTPException as e:
        logger.error(f"HTTPException during file upload: {e.detail}", exc_info=True)
        raise e
    except Exception as e:
        logger.error(
            f"An unexpected error occurred during file upload: {e}", exc_info=True
        )
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")


@router.post("/queryHRAG", response_model=QueryResponse)
async def query_rulebook_endpoint(request: QueryRequest):
    """
    Query the rulebook with a user-provided question.

    Forwards the query to the controller which interacts with
    the LLM-powered query engine.

    Args:
        request (QueryRequest): Contains the user's query text.

    Returns:
        QueryResponse: The answer generated by the query engine.

    Raises:
        HTTPException: If the query engine fails or is not initialized.
    """
    logger.info(f"Received query request: '{request.query}'")

    structured_prompt = f"""
    You are a technical documentation assistant. Answer the user's question and provide your response in the following EXACT format:

    [Your direct answer here]

    REFERENCES:
    [For each source used, provide:]
    - Source: [Exact document/module name]
    - Chapter: [Chapter name and number]
    - Section: [Specific section if available]
    - Page/Location: [If available]

    CONFIDENCE: [High/Medium/Low based on source clarity]

    RELATED_TOPICS: [Any related topics that might be helpful]

    User Question: {request.query}

    CRITICAL: Do not deviate from this format. Always include at least one reference with specific module and chapter information. If information spans multiple documents, list each reference separately.
    """

    try:
        response = await chat_controller.query_hrag(structured_prompt)
        logger.info("Query successfully processed.")
        return response
    except HTTPException as e:
        logger.error(f"HTTPException during rulebook query: {e.detail}", exc_info=True)
        raise e
    except Exception as e:
        logger.error(
            f"An unexpected error occurred during rulebook query: {e}", exc_info=True
        )
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")




@router.post("/queryRAG", response_model=QueryResponse)
async def query_trad_RAG(request: QueryRequest):
    """
    Query the traditional RAG system with a user-provided question.

    Forwards the query to the controller which interacts with
    the LLM-powered query engine.

    Args:
        request (QueryRequest): Contains the user's query text.

    Returns:
        QueryResponse: The answer generated by the query engine.

    Raises:
        HTTPException: If the query engine fails or is not initialized.
    """
    logger.info(f"Received traditional RAG query request: '{request.query}'")
    
    try:
        response = await chat_controller.query_trad_RAG(request.query)
        logger.info("Traditional RAG query successfully processed.")
        return response
    except HTTPException as e:
        logger.error(f"HTTPException during traditional RAG query: {e.detail}", exc_info=True)
        raise e
    except Exception as e:
        logger.error(
            f"An unexpected error occurred during traditional RAG query: {e}", exc_info=True
        )
        raise HTTPException(status_code=500, detail=f"Internal server error: {e}")